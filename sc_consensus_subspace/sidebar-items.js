window.SIDEBAR_ITEMS = {"enum":[["Error","Errors encountered by the Subspace authorship task."]],"fn":[["block_import","Produce a Subspace block-import object to be used later on in the construction of an import-queue."],["get_chain_constants","Get chain constant configurations"],["import_queue","Start an import queue for the Subspace consensus algorithm."],["slot_duration","Read configuration from the runtime state at current best block."],["start_subspace","Start the Subspace worker."],["start_subspace_archiver","Start an archiver that will listen for imported blocks and archive blocks at `K` depth, producing pieces and segment headers (segment headers are then added back to the blockchain as `store_segment_header` extrinsic)."]],"mod":[["aux_schema","Schema for Subspace block weight in the aux-db."],["notification","Utility module for handling Subspace client notifications."]],"struct":[["ArchivedSegmentNotification","Notification with block header hash that needs to be signed and sender for signature."],["ImportedBlockNotification","Notification with imported block header hash that needs to be archived and sender for segment headers."],["NewSlotInfo","Information about new slot that just arrived"],["NewSlotNotification","New slot notification with slot information and sender for solution for the slot."],["RewardSigningNotification","Notification with a hash that needs to be signed to receive reward and sender for signature."],["SubspaceBlockImport","A block-import handler for Subspace."],["SubspaceLink","State that must be shared between the import queue and the authoring logic."],["SubspaceParams","Parameters for Subspace."],["SubspaceVerifier","A verifier for Subspace blocks."],["SubspaceWorker","Worker for Subspace which implements `Future<Output=()>`. This must be polled."]]};